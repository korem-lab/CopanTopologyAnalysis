from os.path import join

configfile: "config/config_BFS.yaml"

# Define variables for multiple values
GRAPH_IDS = config["graph_id"]
WALK_LENGTHS = config["walk_lengths"]
N_WALKS = config["n_walks"]
BFS_WALK_LENGTHS = config["bfs_neighbors_walk_length"]
BFS_N_WALKS = config["bfs_neighbors_n_walks"]
P_VALUES = config["p"]
Q_VALUES = config["q"]
PERPLEXITIES = config["perplexities"]
N_ITERS = config["n_iters"]
DIMENSIONS = config["dimensions"]
TAX_LEVEL = config["tax_level"]

rule all:
    input:
       # expand(join(config["graphDir"], "{graph_id}.gfa"), graph_id=GRAPH_IDS),
       expand(join(config["linksDir"], "{graph_id}_links.json"), graph_id=GRAPH_IDS),

       expand(join(config["linksDir"], "{graph_id}_bfs_neighbors.json"), graph_id=GRAPH_IDS)

       # Walks outputs
       expand(join(config["walkListsDir"], "{graph_id}_{walk_length}Lw{n_walks}Nw{p}p{q}q_walks_vectorized_BFS.txt"),
              graph_id=GRAPH_IDS,
              walk_length=WALK_LENGTHS,
              n_walks=N_WALKS,
              p=P_VALUES,
              q=Q_VALUES),

#        # model embeddings
       expand(join(config["embeddingsDir"], "{graph_id}_{walk_length}Lw{n_walks}Nw{p}p{q}q{k}k_walks_BFS.embeddings"),
              graph_id=GRAPH_IDS,
              walk_length=WALK_LENGTHS,
              n_walks=N_WALKS,
              p=P_VALUES,
              q=Q_VALUES, 
              k=DIMENSIONS),

       #  plotting embedding with PCA
        expand(join(config["plotsDir"], "{graph_id}_{walk_length}Lw{n_walks}Nw{p}p{q}q{k}k_PCA_{tax_level}_BFS.png"),
               graph_id=GRAPH_IDS,
               walk_length=WALK_LENGTHS,
               n_walks=N_WALKS,
               p=P_VALUES,
               q=Q_VALUES,
               k=DIMENSIONS, 
               tax_level=TAX_LEVEL)

       # colored by species!
        expand(join(config["plotsDir"], "{graph_id}_{walk_length}Lw{n_walks}Nw{p}p{q}q{k}k_{perplexity}perp{n_iter}iter_embeddingPlot_{tax_level}_BFS.png"),
               graph_id=GRAPH_IDS,
               walk_length=WALK_LENGTHS,
               n_walks=N_WALKS,
               p=P_VALUES,
               q=Q_VALUES,
               perplexity=PERPLEXITIES,
               n_iter=N_ITERS, 
               k=DIMENSIONS, 
               tax_level=TAX_LEVEL),

#        # pairwise distances
       expand(join(config["distancesDir"], "{graph_id}_{walk_length}Lw{n_walks}Nw{p}p{q}q{k}k_pairwiseDistances_BFS.csv"),
              graph_id=GRAPH_IDS,
              walk_length=WALK_LENGTHS,
              n_walks=N_WALKS,
              p=P_VALUES,
              q=Q_VALUES,
              k=DIMENSIONS),

#     #    # # degree info for each node
       expand(join(config["degreeDir"], "{graph_id}_node_degrees.csv"),
              graph_id=GRAPH_IDS), 

       # # joining pairwise distances plus degree for each node
       expand(join(config["distDegDir"], "{graph_id}_{walk_length}Lw{n_walks}Nw{p}p{q}q{k}k_distancesWithDegree_BFS.csv"),
              graph_id=GRAPH_IDS,
              walk_length=WALK_LENGTHS,
              n_walks=N_WALKS,
              p=P_VALUES,
              q=Q_VALUES,
              k=DIMENSIONS), 

       #  # joining pairwise distances plus species for each node
       expand(join(config["taxonomyDir"], "{graph_id}_{walk_length}Lw{n_walks}Nw{p}p{q}q{k}k_{tax_level}_distancesWithTax_BFS.csv"),
              graph_id=GRAPH_IDS,
              walk_length=WALK_LENGTHS,
              n_walks=N_WALKS,
              p=P_VALUES,
              q=Q_VALUES,
              k=DIMENSIONS, 
              tax_level=TAX_LEVEL),
       expand(join(config["taxonomyDir"], "{graph_id}_{walk_length}Lw{n_walks}Nw{p}p{q}q{k}k_{tax_level}_averageDistance_BFS.csv"),
              graph_id=GRAPH_IDS,
              walk_length=WALK_LENGTHS,
              n_walks=N_WALKS,
              p=P_VALUES,
              q=Q_VALUES,
              k=DIMENSIONS, 
              tax_level=TAX_LEVEL)

include:
    "workflow/rules/copan_node2vec_BFS.smk"
